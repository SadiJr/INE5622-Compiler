# Generated from sadbeep/sadbeep/sadbeep.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2-")
        buf.write("\u012b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r")
        buf.write("\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3")
        buf.write("\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3 \6 \u00c4\n")
        buf.write(" \r \16 \u00c5\3!\3!\5!\u00ca\n!\3\"\3\"\7\"\u00ce\n\"")
        buf.write("\f\"\16\"\u00d1\13\"\3#\3#\3#\3#\7#\u00d7\n#\f#\16#\u00da")
        buf.write("\13#\3#\3#\3#\3#\3#\3$\3$\3$\3$\7$\u00e5\n$\f$\16$\u00e8")
        buf.write("\13$\3$\3$\3%\3%\5%\u00ee\n%\3&\6&\u00f1\n&\r&\16&\u00f2")
        buf.write("\3\'\6\'\u00f6\n\'\r\'\16\'\u00f7\3\'\3\'\6\'\u00fc\n")
        buf.write("\'\r\'\16\'\u00fd\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*")
        buf.write("\3*\5*\u010d\n*\3+\3+\7+\u0111\n+\f+\16+\u0114\13+\3+")
        buf.write("\3+\3+\7+\u0119\n+\f+\16+\u011c\13+\3+\5+\u011f\n+\3,")
        buf.write("\6,\u0122\n,\r,\16,\u0123\3,\3,\3-\3-\3.\3.\3\u00d8\2")
        buf.write("/\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?\2A\2C!E\"G#I$K%M&")
        buf.write("O\'Q(S)U*W+Y,[-\3\2\7\4\2C\\c|\4\2\f\f\17\17\3\2\62;\5")
        buf.write("\2\f\f\17\17))\5\2\13\f\17\17\"\"\2\u0136\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2")
        buf.write("G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2")
        buf.write("\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2")
        buf.write("\2\2[\3\2\2\2\3]\3\2\2\2\5_\3\2\2\2\7a\3\2\2\2\tc\3\2")
        buf.write("\2\2\13e\3\2\2\2\rl\3\2\2\2\17n\3\2\2\2\21q\3\2\2\2\23")
        buf.write("t\3\2\2\2\25w\3\2\2\2\27|\3\2\2\2\31\u0082\3\2\2\2\33")
        buf.write("\u0086\3\2\2\2\35\u008d\3\2\2\2\37\u008f\3\2\2\2!\u0091")
        buf.write("\3\2\2\2#\u0096\3\2\2\2%\u009b\3\2\2\2\'\u009d\3\2\2\2")
        buf.write(")\u00a4\3\2\2\2+\u00a6\3\2\2\2-\u00a8\3\2\2\2/\u00ab\3")
        buf.write("\2\2\2\61\u00ae\3\2\2\2\63\u00b1\3\2\2\2\65\u00b4\3\2")
        buf.write("\2\2\67\u00b6\3\2\2\29\u00b8\3\2\2\2;\u00ba\3\2\2\2=\u00bc")
        buf.write("\3\2\2\2?\u00c3\3\2\2\2A\u00c9\3\2\2\2C\u00cb\3\2\2\2")
        buf.write("E\u00d2\3\2\2\2G\u00e0\3\2\2\2I\u00ed\3\2\2\2K\u00f0\3")
        buf.write("\2\2\2M\u00f5\3\2\2\2O\u00ff\3\2\2\2Q\u0104\3\2\2\2S\u010c")
        buf.write("\3\2\2\2U\u011e\3\2\2\2W\u0121\3\2\2\2Y\u0127\3\2\2\2")
        buf.write("[\u0129\3\2\2\2]^\7?\2\2^\4\3\2\2\2_`\7=\2\2`\6\3\2\2")
        buf.write("\2ab\7*\2\2b\b\3\2\2\2cd\7+\2\2d\n\3\2\2\2ef\7t\2\2fg")
        buf.write("\7g\2\2gh\7v\2\2hi\7w\2\2ij\7t\2\2jk\7p\2\2k\f\3\2\2\2")
        buf.write("lm\7/\2\2m\16\3\2\2\2no\7k\2\2op\7h\2\2p\20\3\2\2\2qr")
        buf.write("\7(\2\2rs\7(\2\2s\22\3\2\2\2tu\7~\2\2uv\7~\2\2v\24\3\2")
        buf.write("\2\2wx\7g\2\2xy\7n\2\2yz\7u\2\2z{\7g\2\2{\26\3\2\2\2|")
        buf.write("}\7y\2\2}~\7j\2\2~\177\7k\2\2\177\u0080\7n\2\2\u0080\u0081")
        buf.write("\7g\2\2\u0081\30\3\2\2\2\u0082\u0083\7h\2\2\u0083\u0084")
        buf.write("\7q\2\2\u0084\u0085\7t\2\2\u0085\32\3\2\2\2\u0086\u0087")
        buf.write("\7u\2\2\u0087\u0088\7y\2\2\u0088\u0089\7k\2\2\u0089\u008a")
        buf.write("\7v\2\2\u008a\u008b\7e\2\2\u008b\u008c\7j\2\2\u008c\34")
        buf.write("\3\2\2\2\u008d\u008e\7}\2\2\u008e\36\3\2\2\2\u008f\u0090")
        buf.write("\7\177\2\2\u0090 \3\2\2\2\u0091\u0092\7h\2\2\u0092\u0093")
        buf.write("\7w\2\2\u0093\u0094\7p\2\2\u0094\u0095\7e\2\2\u0095\"")
        buf.write("\3\2\2\2\u0096\u0097\7e\2\2\u0097\u0098\7c\2\2\u0098\u0099")
        buf.write("\7u\2\2\u0099\u009a\7g\2\2\u009a$\3\2\2\2\u009b\u009c")
        buf.write("\7<\2\2\u009c&\3\2\2\2\u009d\u009e\7d\2\2\u009e\u009f")
        buf.write("\7t\2\2\u009f\u00a0\7g\2\2\u00a0\u00a1\7c\2\2\u00a1\u00a2")
        buf.write("\7m\2\2\u00a2\u00a3\7=\2\2\u00a3(\3\2\2\2\u00a4\u00a5")
        buf.write("\7@\2\2\u00a5*\3\2\2\2\u00a6\u00a7\7>\2\2\u00a7,\3\2\2")
        buf.write("\2\u00a8\u00a9\7@\2\2\u00a9\u00aa\7?\2\2\u00aa.\3\2\2")
        buf.write("\2\u00ab\u00ac\7>\2\2\u00ac\u00ad\7?\2\2\u00ad\60\3\2")
        buf.write("\2\2\u00ae\u00af\7?\2\2\u00af\u00b0\7?\2\2\u00b0\62\3")
        buf.write("\2\2\2\u00b1\u00b2\7#\2\2\u00b2\u00b3\7?\2\2\u00b3\64")
        buf.write("\3\2\2\2\u00b4\u00b5\7-\2\2\u00b5\66\3\2\2\2\u00b6\u00b7")
        buf.write("\7,\2\2\u00b78\3\2\2\2\u00b8\u00b9\7\61\2\2\u00b9:\3\2")
        buf.write("\2\2\u00ba\u00bb\7\'\2\2\u00bb<\3\2\2\2\u00bc\u00bd\7")
        buf.write("k\2\2\u00bd\u00be\7p\2\2\u00be\u00bf\7r\2\2\u00bf\u00c0")
        buf.write("\7w\2\2\u00c0\u00c1\7v\2\2\u00c1>\3\2\2\2\u00c2\u00c4")
        buf.write("\t\2\2\2\u00c3\u00c2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5")
        buf.write("\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6@\3\2\2\2\u00c7")
        buf.write("\u00ca\5? \2\u00c8\u00ca\5I%\2\u00c9\u00c7\3\2\2\2\u00c9")
        buf.write("\u00c8\3\2\2\2\u00caB\3\2\2\2\u00cb\u00cf\5? \2\u00cc")
        buf.write("\u00ce\5A!\2\u00cd\u00cc\3\2\2\2\u00ce\u00d1\3\2\2\2\u00cf")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0D\3\2\2\2\u00d1")
        buf.write("\u00cf\3\2\2\2\u00d2\u00d3\7\61\2\2\u00d3\u00d4\7,\2\2")
        buf.write("\u00d4\u00d8\3\2\2\2\u00d5\u00d7\13\2\2\2\u00d6\u00d5")
        buf.write("\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d9\u00db\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00db\u00dc\7,\2\2\u00dc\u00dd\7\61\2\2\u00dd\u00de\3")
        buf.write("\2\2\2\u00de\u00df\b#\2\2\u00dfF\3\2\2\2\u00e0\u00e1\7")
        buf.write("\61\2\2\u00e1\u00e2\7\61\2\2\u00e2\u00e6\3\2\2\2\u00e3")
        buf.write("\u00e5\n\3\2\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8\3\2\2\2")
        buf.write("\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9\3")
        buf.write("\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00ea\b$\2\2\u00eaH\3")
        buf.write("\2\2\2\u00eb\u00ee\5K&\2\u00ec\u00ee\5M\'\2\u00ed\u00eb")
        buf.write("\3\2\2\2\u00ed\u00ec\3\2\2\2\u00eeJ\3\2\2\2\u00ef\u00f1")
        buf.write("\t\4\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3L\3\2\2\2\u00f4")
        buf.write("\u00f6\t\4\2\2\u00f5\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2")
        buf.write("\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3")
        buf.write("\2\2\2\u00f9\u00fb\7\60\2\2\u00fa\u00fc\t\4\2\2\u00fb")
        buf.write("\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fb\3\2\2\2")
        buf.write("\u00fd\u00fe\3\2\2\2\u00feN\3\2\2\2\u00ff\u0100\7V\2\2")
        buf.write("\u0100\u0101\7t\2\2\u0101\u0102\7w\2\2\u0102\u0103\7g")
        buf.write("\2\2\u0103P\3\2\2\2\u0104\u0105\7H\2\2\u0105\u0106\7c")
        buf.write("\2\2\u0106\u0107\7n\2\2\u0107\u0108\7u\2\2\u0108\u0109")
        buf.write("\7g\2\2\u0109R\3\2\2\2\u010a\u010d\5O(\2\u010b\u010d\5")
        buf.write("Q)\2\u010c\u010a\3\2\2\2\u010c\u010b\3\2\2\2\u010dT\3")
        buf.write("\2\2\2\u010e\u0112\7)\2\2\u010f\u0111\n\5\2\2\u0110\u010f")
        buf.write("\3\2\2\2\u0111\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112")
        buf.write("\u0113\3\2\2\2\u0113\u0115\3\2\2\2\u0114\u0112\3\2\2\2")
        buf.write("\u0115\u011f\7)\2\2\u0116\u011a\7$\2\2\u0117\u0119\n\5")
        buf.write("\2\2\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d\3\2\2\2\u011c")
        buf.write("\u011a\3\2\2\2\u011d\u011f\7$\2\2\u011e\u010e\3\2\2\2")
        buf.write("\u011e\u0116\3\2\2\2\u011fV\3\2\2\2\u0120\u0122\t\6\2")
        buf.write("\2\u0121\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0121")
        buf.write("\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0125\3\2\2\2\u0125")
        buf.write("\u0126\b,\2\2\u0126X\3\2\2\2\u0127\u0128\7\60\2\2\u0128")
        buf.write("Z\3\2\2\2\u0129\u012a\7.\2\2\u012a\\\3\2\2\2\21\2\u00c5")
        buf.write("\u00c9\u00cf\u00d8\u00e6\u00ed\u00f2\u00f7\u00fd\u010c")
        buf.write("\u0112\u011a\u011e\u0123\3\b\2\2")
        return buf.getvalue()


class sadbeepLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    ID = 31
    COMMENT = 32
    LINE_COMMENT = 33
    NUMBER = 34
    INT = 35
    FLOAT = 36
    TRUE = 37
    FALSE = 38
    BOOL = 39
    STRING = 40
    WS = 41
    DOT = 42
    COMMA = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "';'", "'('", "')'", "'return'", "'-'", "'if'", "'&&'", 
            "'||'", "'else'", "'while'", "'for'", "'switch'", "'{'", "'}'", 
            "'func'", "'case'", "':'", "'break;'", "'>'", "'<'", "'>='", 
            "'<='", "'=='", "'!='", "'+'", "'*'", "'/'", "'%'", "'input'", 
            "'True'", "'False'", "'.'", "','" ]

    symbolicNames = [ "<INVALID>",
            "ID", "COMMENT", "LINE_COMMENT", "NUMBER", "INT", "FLOAT", "TRUE", 
            "FALSE", "BOOL", "STRING", "WS", "DOT", "COMMA" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "ID_START", "ID_BODY", 
                  "ID", "COMMENT", "LINE_COMMENT", "NUMBER", "INT", "FLOAT", 
                  "TRUE", "FALSE", "BOOL", "STRING", "WS", "DOT", "COMMA" ]

    grammarFileName = "sadbeep.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


